openapi: 3.0.0
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9

servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing

components:
  schemas:
    User:
      nullable: true
      properties:
        id:
          type: integer
        name:
          type: string
        user_type:
          type: string
    AdminUser:
      properties:
        id:
          type: integer
        name:
          type: string
        user_type:
          type: string
        beard:
          type: boolean
        events:
          type: array
          default:
            - push
          items:
            type: string
    OrderList:
      properties:
        orders:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              amount:
                type: integer
              config:
                "$ref": '#/components/schemas/webhook-config-insecure-ssl'
              params:
                type: array
                items: {}
    UserAndOrder:
      allOf:
        - "$ref": '#/components/schemas/User'
        - "$ref": '#/components/schemas/OrderList'
    webhook-config-url:
      type: string
      description: The URL to which the payloads will be delivered.
      example: https://example.com/webhook
      format: uri
      nullable: true
    webhook-config-insecure-ssl:
      oneOf:
        - type: string
          description: Determines whether the SSL certificate of the host for `url`
            will be verified when delivering payloads. Supported values include `0`
            (verification is performed) and `1` (verification is not performed). The
            default is `0`. **We strongly recommend not setting this to `1` as you are
            subject to man-in-the-middle and other attacks.**
          example: '"0"'
        - type: number
    issue-event-for-issue:
      title: Issue Event for Issue
      description: Issue Event for Issue
      anyOf:
        - "$ref": "#/components/schemas/OrderList"
        - "$ref": "#/components/schemas/AdminUser"
        - "$ref": "#/components/schemas/UserOrAdmin"
    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'
    UserOrAdmin:
      oneOf:
        - "$ref": '#/components/schemas/User'
        - "$ref": '#/components/schemas/AdminUser'
      discriminator:
        propertyName: user_type
    allowed-actions:
      type: string
      nullable: true
      description: string enum
      enum:
        - all
        - local_only
        - selected
        - null


paths:
  /orders:
    get:
      summary: Return a list of orders
      description: Orders list
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    amount:
                      type: integer
        "400":
          description: Error
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Empty response
        "405":
          description: array of references
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": '#/components/schemas/OrderList'

  /users:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - "$ref": '#/components/schemas/User'
                    - "$ref": '#/components/schemas/AdminUser'
                  discriminator:
                    propertyName: user_type
        "201":
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - "$ref": '#/components/schemas/User'
                    - "$ref": '#/components/schemas/AdminUser'
                  discriminator:
                    propertyName: user_type
                    mapping:
                      normal: '#/components/schemas/User'
                      admin: '#/components/schemas/AdminUser'
        "400": # status code
          description: Error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    details:
                      type: string
                      default: ''
                    count:
                      type: integer
                      nullable: true

    post:
      summary: Make a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  default: "user1"
                details:
                  type: string
                  default: ''
                  nullable: true
                age:
                  oneOf:
                    - type: integer
                    - type: string
                  default: "hello"
      responses:
        '200':
          description: "User created successfully"
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": '#/components/schemas/User'
                  - "$ref": '#/components/schemas/AdminUser'
        '204':
          description: "User already exists"
          content:
            application/json:
              schema:
                type: object
                properties:
                  existing:
                    "$ref": '#/components/schemas/UserOrAdmin'
                  events:
                    "$ref": '#/components/schemas/issue-event-for-issue'
        '400':
          description: "User created but here is an error"
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": '#/components/schemas/User'
                  - type: object
                    required:
                      - error
                      - path
                    properties:
                      error:
                        type: string
                      allowed_actions:
                        "$ref": '#/components/schemas/allowed-actions'
                      path:
                        type: string
                        nullable: true
                        default: /
                        enum:
                          - /
                          - /docs
                          - null
                      webhook-url:
                        "$ref": '#/components/schemas/webhook-config-url'
